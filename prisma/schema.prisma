generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Formalin {
  id          Int       @id @default(autoincrement())
  key         String?
  place       String?
  status      String?
  expired     DateTime?
  timestamp   DateTime?
  size        String?
  lot_number  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  box_number  String?
  productCode String?
  returnBy    String?
  histories   History[]

  @@unique([lot_number, key, box_number, productCode])

  @@index([lot_number, box_number, productCode])
  @@index([status])
  @@index([place])
  @@index([size])
  @@index([expired])
  @@index([timestamp])
}

model History {
  id         Int       @id @default(autoincrement())
  key        String?
  updated_by String?
  updated_at DateTime
  old_status String?
  new_status String?
  old_place  String?
  new_place  String?
  formalinId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  formalin   Formalin? @relation(fields: [formalinId], references: [id])

  @@index([formalinId])
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  password      String
  isAdmin       Boolean   @default(false)
  email         String?   @unique
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
